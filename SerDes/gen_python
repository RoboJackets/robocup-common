#!/usr/bin/python
# -*- coding: utf-8 -*-
#FIXME - Finish supporting external enums

import sys
from xml.dom.minidom import *

primitives = ['bool', 'float', 'double']
externals = {'string':'string', 'bool':'bool'}

# Add int* and uint* to primitives and typeMap
for i in ['8', '16', '32', '64']:
    typename = 'int' + i
    primitives.append(typename)
    primitives.append('u' + typename)

indentLevel = 0
indentString = ''

def indent():
    global indentLevel
    indentLevel += 1
def unindent():
    global indentLevel
    indentLevel -= 1
def write(str = ''):
    print ' ' * (indentLevel * 4) + str

class ChildrenByName:
    def __init__(self, node, name):
        self.node = node.firstChild
        if type(name) == type(''):
            self.name = [name]
        else:
            self.name = name
    
    def __iter__(self):
        return self
    
    def next(self):
        while self.node != None:
            ret = self.node
            self.node = self.node.nextSibling
            
            if ret.nodeType == Node.ELEMENT_NODE and ret.nodeName in self.name:
                return ret
            
        raise StopIteration

########

if len(sys.argv) != 2:
    print 'Usage: ' + sys.argv[0] + ' <input.xml>'
    sys.exit(1)

filename = sys.argv[1]
dom = parse(filename)
root = dom.firstChild

if root.nodeType != Node.ELEMENT_NODE or root.nodeName != 'struct':
    #FIXME - stderr
    print 'Root tag must be struct'
    sys.exit(1)

def emitStruct(node):
    className = node.getAttribute('typename')
    ext = node.getAttribute('external_python')
    
    # Used by the second pass
    def emitBody(node, reading, objName = 'self'):
        for child in ChildrenByName(node, ['member', 'array']):
            dataType = child.getAttribute('type')
            if dataType in enumTypes:
                dataType = enumTypes[dataType]
            
            name = child.getAttribute('name')
            selfname = objName + '.' + name
            
            if child.nodeName == 'member':
                if dataType in primitives:
                    if reading:
                        write(selfname + ' = buf.read_' + dataType + '()')
                    else:
                        write('buf.write_' + dataType + '(' + selfname + ')')
                elif dataType in externals:
                    if reading:
                        write(selfname + ' = read_' + dataType + '(buf)')
                    else:
                        write('write_' + dataType + '(buf, ' + selfname + ')')
                else:
                    if reading:
                        write(name + '.read(buf)')
                    else:
                        write(name + '.write(buf)')
            elif child.nodeName == 'array':
                sizetype = child.getAttribute('sizetype')
                if sizetype == '':
                    sizetype = 'uint32'
                
                size = child.getAttribute('size')
                if size == '':
                    if reading:
                        write('self.' + name + ' = [None] * buf.read_' + sizetype + '()')
                    else:
                        size = 'len(' + selfname + ')'
                        write('buf.write_' + sizetype + '(' + size + ');')
                
                if reading:
                    write('for i in range(len(' + selfname + ')):')
                    indent()
                    if dataType in primitives:
                        write(selfname + ' = buf.read_' + dataType + '()')
                    elif dataType in externals:
                        write(selfname + ' = read_' + dataType + '(buf)')
                    else:
                        write(selfname + '[i].read(buf)')
                else:
                    write('for i in ' + selfname + ':')
                    indent()
                    if dataType in primitives:
                        write('buf.write_' + dataType + '(i)')
                    elif dataType in externals:
                        write('write_' + dataType + '(buf, i)')
                    else:
                        write('i.write(buf)')
                unindent()
    
    if ext == '':
        # Not external: emit a class declaration
        write('class ' + className + ':')
        indent()
        
        # Inner structures
        for child in ChildrenByName(node, 'struct'):
            emitStruct(child)
            write('')
        
        # First pass: declarations
        
        # Constants
        done = False
        for child in ChildrenByName(node, 'constant'):
            name = child.getAttribute('name')
            value = child.getAttribute('value')
            write(name + ' = ' + value)
            done = True
        if done:
            write('')
        
        # Enums
        enumTypes = {}
        enumDefault = {}
        for child in ChildrenByName(node, 'enum'):
            enumName = child.getAttribute('typename')
            
            dataType = child.getAttribute('type')
            if dataType == '':
                dataType = 'uint32'

            enumExt = child.getAttribute('external_python')
            if enumExt != '':
                externals[className] = enumExt
            
            enumTypes[enumName] = dataType
            
            write('# ' + enumName)
            value = 0
            first = True
            for item in ChildrenByName(child, 'constant'):
                name = item.getAttribute('name')
                valueAttr = item.getAttribute('value')
                if valueAttr != '':
                    value = int(valueAttr)
                
                # Store the first value as the default
                if first == True:
                    enumDefault[enumName] = name
                    first = False
                
                write(name + ' = ' + str(value))
                
                # Go to the next value
                value += 1
            write('')
        
        # Constructor
        first = True
        for child in ChildrenByName(node, ['member', 'array']):
            line = ''
            
            dataType = child.getAttribute('type')
            isEnum = dataType in enumTypes
            isExternal = dataType in externals
            
            name = child.getAttribute('name')
            value = child.getAttribute('value')
            if value == '':
                if isEnum:
                    value = 'self.' + enumDefault[dataType]
                elif dataType == 'bool':
                    value = 'false'
                elif isExternal:
                    value = externals[dataType] + '()'
                else:
                    value = '0'
            elif isEnum:
                value = 'self.' + value
            
            self_name = 'self.' + name
            if child.nodeName == 'member':
                # Single member
                line = self_name + ' = ' + value
            else:
                # Array
                size = child.getAttribute('size')
                if size == '':
                    # Variable array
                    line = self_name + ' = []'
                else:
                    # Fixed-size array
                    line = self_name + ' = [' + value + ' for i in range(' + size + ')]'
                
            if line != '':
                if first:
                    write('def __init__(self):')
                    indent()
                    first = False
                write(line)
        
        if not first:
            unindent()
            write('')
        
        # Second pass: serialization bodies
        write('def read(self, buf):')
        indent()
        emitBody(node, True)
        unindent()
        write('')
        
        write('def write(self, buf):')
        indent()
        emitBody(node, False)
        unindent()
    
        unindent()
    else:
        # External: emit only serialization bodies
        externals[className] = ext
        enumTypes = {}
        write('def read_' + className + '(buf, obj):')
        indent()
        emitBody(node, True, 'obj')
        unindent()
        write('')
        
        write('def write_' + className + '(buf, obj):')
        indent()
        emitBody(node, False, 'obj')
        unindent()

emitStruct(root)
